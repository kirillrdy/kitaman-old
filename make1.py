"This is a default module for handling 'make' driven packages"

import re
import sys
import os
import glob
from libkita import *
import classkita

class Kita(classkita.Kita):
  "This is kita object"

  def generate_shell_script(self):
    "generates script file"
    os.system("mkdir -p /tmp/kitaman/%s" % self.info["NAME-VER"])
    f=open("/tmp/kitaman/%s/build-script.sh" % self.info["NAME-VER"],"w")
    std_func="""
# This is temporary script generated by KITAMAN 

#We want to be error free
set -e

#Name of the package
NAME=%s

#Where the source is
SRC_DIR=/usr/kitaman/src
TMP_DIR=/tmp/kitaman/${NAME}
BUILD_DIR=${TMP_DIR}/build
INSTALL_DIR=${TMP_DIR}/install
PKG_DIR=/usr/kitaman/pkg


mkdir -p $PKG_DIR
mkdir -p $BUILD_DIR
mkdir -p $INSTALL_DIR

##### Next comes the list of default functions,
# each of then can be overwritten in your kitafile

# The next function extracts the files and enters the directory to be ready
# for patching or compiling etc
ext_src()
    {
      echo -n "Extracting $1 .. "
      if test ${1##*.} = "bz2" ; then
      tar xjpf $1 -C ${BUILD_DIR}
      fi
      if test ${1##*.} = "gz" ; then
      tar xpf $1 -C ${BUILD_DIR}
      fi
      if test ${1##*.} = "tgz" ; then
      tar xpf $1 -C ${BUILD_DIR}
      fi
      if test ${1##*.} = "zip" ; then
      unzip $1 -d ${BUILD_DIR}
      fi
      cd ${BUILD_DIR}/*
      echo "Done"
    }
patch_src()
    {
      echo "No patches"
    }
build_src()
    {
      echo "Build instructions are absent from kitafile,Trying defaults!!!"
      ./configure --prefix=/usr
      make
    }
kita_install()
    {
      make DESTDIR=$INSTALL_DIR install
      make install
    }
make_pkg()
    {
      cd $INSTALL_DIR
      tar cjpf ${PKG_DIR}/${NAME}-bin.tar.bz2 *
    }

    """ % self.info["NAME-VER"]
    f.write(std_func)
    file_var=""
    if self.info.has_key("FILES"):
          for each_file in self.info["FILES"]:
            file_var=""
            file_var=os.path.basename(each_file)
            if os.path.splitext(file_var)[1] in [".bz2",".gz",".tgz"]:
              file_var="FILES=\"$SRC_DIR/"+file_var+"\""+"\n"
              f.write(file_var)

            if os.path.splitext(file_var)[1] == ".patch":
              file_var="""
patch_src()
{
  patch -Np1 -i $SRC_DIR/%s\n
}             """ % file_var
  
              f.write(file_var)

    f.write(self.info["BUILD"]+"\n")
    f.write("ext_src $FILES\n")
    f.write("patch_src\n")
    f.write("build_src\n")
    f.write("kita_install\n")
    f.write("make_pkg\n")
    f.write("#Need to clean\n")
    f.write("rm -r /tmp/kitaman/${NAME}\n")
    f.write("# This is the end of generated shell script\n")
    f.write("# Next line is a special luck line, which helps programs to overcome errors\n")
    f.write("# Luck n44723: There shall be no segfalts shone on you\n")
    f.write("# Luck n23: Thy shall have all needed dependencies\n")
    f.write("# Luck n29: She will be back\n")
    f.write("# Luck n67: File will never be corrupted\n")
    f.write("# *INSERT LUCK HERE*\n")

    f.close()


  def build(self):
    "executes already created shell script"
    #Check if we already have binary package :-)
    if os.path.exists("/usr/kitaman/pkg/%s-bin.tar.bz2" % self.info["NAME-VER"]):
      print "Package for %s is already build :-)" % self.info["NAME-VER"]
      return True
  
    #Generate Shell script
    self.generate_shell_script()

    if os.system("/bin/sh /tmp/kitaman/%s/build-script.sh" % self.info["NAME-VER"]) > 0:
      return False
    return True

  def install(self):
    "For a given package name installes files from archive"
    print "Merging %s into /" % self.info["NAME-VER"]
    #os.system("tar -xjpf /kitaman/pkg/%s.tar.bz2 -C /" % name)
    #Now we run post install for this package
    os.system("mkdir -p /tmp/kitaman/%s" % self.info["NAME-VER"])
    f=open("/tmp/kitaman/%s/install-script.sh" % self.info["NAME-VER"],"w")
    std_func="""
    set -e
    NAME=%s
    PKG_DIR=%s
    mkdir -p /tmp/kitaman/${NAME}
    post_install()
    {
      echo "Post install is absent from kitafile - Doing nothing..."
    }
    """ % (self.info["NAME-VER"],kita_config["PKG_DIR"])
    f.write(std_func)
    f.write("""
pkg_install() 
{ 
tar -xjpf ${PKG_DIR}/%s-bin.tar.bz2 -C /  
}
""" % self.info["NAME-VER"])

    f.write(self.info["BUILD"]+"\n")
    #f.write("rm -rf /tmp/kitaman/*")
    f.write("pkg_install\n")
    f.write("post_install\n")
    f.write("ldconfig\n")
    f.close()

    if os.system("/bin/sh /tmp/kitaman/%s/install-script.sh" % self.info["NAME-VER"]) > 0:
      return False

    return True

